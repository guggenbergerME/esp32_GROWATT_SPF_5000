/*
   Serial Interface
 * **************************************************** */
// if you don't have enough HW Serial (i.e. on an UNO)
// you are forced to use SoftwareSerial or AltSoftSerial
#include <SoftwareSerial.h>
constexpr uint8_t rxPin = 18;                   // for Softserial
constexpr uint8_t txPin = 19;
SoftwareSerial mySerial(rxPin, txPin);


/* **************************************************** *
   Modbus
 * **************************************************** */
#include <ModbusMaster.h>                        // Modbus Master 2.0.0 by Doc Walker - install with Library Manager
constexpr uint8_t modbusEnablePin = 4;           // The GPIO used to control the MAX485 TX pin. Set to 255 if you are not using RS485 or a selfsensing adapter
constexpr uint32_t modbusBaud = 9600;          // use slow speeds with SoftSerial
constexpr uint16_t modbusRestTx = 15000;         // rest time between transmissions - microseconds
uint32_t modbusPreviousTx = 0;                   // timestamp of last transmission - microseconds
ModbusMaster serverA;                            // instantiate ModbusMaster object - slave - node

// this function will be called before the client transmits data
void preTransmission()
{
  while (micros() - modbusPreviousTx < modbusRestTx)   // check last transmission end and wait if the call was to early
  {
    yield();                                           // wait some time and allow background tasks
  }
  digitalWrite(modbusEnablePin, HIGH);
}

// this function will be called after the transmission
void postTransmission()
{
  digitalWrite(modbusEnablePin, LOW);
  modbusPreviousTx = micros();         // remember last timestamp
}

// do all the settings for the Modbus
void modbusInit()
{
  mySerial.begin(modbusBaud);                     // initialize Modbus communication baud rate
  serverA.begin(1, mySerial);                     // communicate with Modbus server ID over the given Serial interface
  pinMode(modbusEnablePin, OUTPUT);               // Init enable pins for modbus master library
  digitalWrite(modbusEnablePin, LOW);
  serverA.preTransmission(preTransmission);       // Callbacks allow us to configure the RS485 transceiver correctly
  serverA.postTransmission(postTransmission);
}

// getdata from Modubs Server(Slave) and print to Serial
void requestData()
{
  constexpr uint16_t interval = 3000;             // interval of modbus requests
  static uint32_t previousMillis = -interval;     // timestamp of last request
  static uint8_t actual = 0;                      // actual iteration
  uint32_t currentMillis = millis();

  if (currentMillis - previousMillis > interval)  // set the interval in ms
  {
    previousMillis = currentMillis;
    uint16_t reg = 0x03;
    int result;
    result = serverA.readInputRegisters(reg, 8);  // request from startregster, n Registers
    if (result == serverA.ku8MBSuccess)           // do something if read is successfull
    {
      Serial.print(F("A   0   ")); Serial.println(serverA.getResponseBuffer(0x00), DEC);
      Serial.print(F("A   1   ")); Serial.println(serverA.getResponseBuffer(0x01), DEC);
 
    }
    else
    {
      Serial.print(F("ERROR!!! --> Keine Verbindung zum Wechselrichter! ")); Serial.print(reg, HEX); Serial.print(F(" Code = ")); Serial.println(result, HEX);
    }
  }
}

/* **************************************************** *
   setup and loop
 * **************************************************** */

void setup()
{
  Serial.begin(38400);
  Serial.println(F("Modbus Client Example D 485 halfduplex"));

  modbusInit();
}

void loop()
{
  requestData();
}